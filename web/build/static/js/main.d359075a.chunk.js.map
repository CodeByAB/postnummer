{"version":3,"sources":["internet.svg","Console.js","Output.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Con","styled","div","_templateObject","request","Console","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","monitor","console","log","text","_this2","react_default","a","createElement","className","lib_default","ref","editorRef","mode","theme","height","widht","value","defaultValue","onChange","name","editorProps","$blockScrolling","React","Component","Out","Output_templateObject","Pre","pre","_templateObject2","Output","Landing","App_templateObject","Send","App_templateObject2","Request","_templateObject3","Response","_templateObject4","App","consoleRef","createRef","state","output","src_Console","src_Output","onClick","setState","current","alt","src","ButtonIcon","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wXCOxC,IAAMC,EAAMC,IAAOC,IAAVC,KAMHC,EAAO,mCAkCEC,cA3Bb,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,QAAWC,QAAQC,IACxBT,EAAKU,KAAOb,EAJMG,wEAOV,IAAAW,EAAAR,KACR,OACES,EAAAC,EAAAC,cAACrB,EAAD,CAAKsB,UAAU,WACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,IAAKd,KAAKe,UACVC,KAAK,OACLC,MAAM,kBACNC,OAAO,OACPC,MAAM,OACNC,MAAOpB,KAAKO,KACZc,aAAc3B,EACd4B,SAAU,SAAA5B,GAAO,OAAIc,EAAKD,KAAOb,GACjC6B,KAAK,iBACLC,YAAa,CAAEC,iBAAiB,aArBpBC,IAAMC,smBChB5B,IAAMC,EAAMrC,IAAOC,IAAVqC,KAMHC,EAAMvC,IAAOwC,IAAVC,KA2BMC,mLAVX,OACExB,EAAAC,EAAAC,cAACiB,EAAD,CAAKhB,UAAU,WACbH,EAAAC,EAAAC,cAACmB,EAAD,KACG9B,KAAKJ,MAAMW,MAAQ,qCALTmB,IAAMC,wtDClB3B,IAAMO,EAAU3C,IAAOC,IAAV2C,KAyCPC,EAAO7C,IAAOC,IAAV6C,KAkBJC,EAAU/C,IAAOC,IAAV+C,KAOPC,EAAWjD,IAAOC,IAAViD,KAsCCC,cA9Bb,SAAAA,EAAa9C,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0C,IAClB7C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4C,GAAAvC,KAAAH,KAAMJ,KAED+C,WAAajB,IAAMkB,YAExB/C,EAAKgD,MAAQ,CACXC,OAAQ,IANQjD,wEAUV,IAAAW,EAAAR,KACR,OACES,EAAAC,EAAAC,cAACuB,EAAD,CAAStB,UAAU,OACjBH,EAAAC,EAAAC,cAAC2B,EAAD,sBACA7B,EAAAC,EAAAC,cAAC6B,EAAD,uBACA/B,EAAAC,EAAAC,cAACoC,EAAD,CAASjC,IAAKd,KAAK2C,aACnBlC,EAAAC,EAAAC,cAACqC,EAAD,CAAQzC,KAAMP,KAAK6C,MAAMC,SACzBrC,EAAAC,EAAAC,cAACyB,EAAD,CAAMa,QAAS,WAIbzC,EAAK0C,SAAS,CAAEJ,OAAQtC,EAAKmC,WAAWQ,QAAQ5C,SAEhDE,EAAAC,EAAAC,cAAA,OAAKyC,IAAI,cAAcC,IAAKC,eAxBpB5B,IAAMC,WCnEJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d359075a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/internet.3edf1c69.svg\";","import React from 'react'\nimport styled from 'styled-components'\nimport AceEditor from 'react-ace'\n\nimport 'brace/mode/json'\nimport 'brace/theme/clouds_midnight'\n\nconst Con = styled.div`\n  grid-area: console;\n  border-radius: 10px;\n\n`\n\nconst request = `\n{\n  \"postnummer\": 135551\n}\n`\n\nclass Console extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.monitor = (console.log)\n    this.text = request\n  }\n\n  render () {\n    return (\n      <Con className='console'>\n        <AceEditor\n          ref={this.editorRef}\n          mode='json'\n          theme='clouds_midnight'\n          height='100%'\n          widht='100%'\n          value={this.text}\n          defaultValue={request}\n          onChange={request => this.text = request}\n          name='Console Editor'\n          editorProps={{ $blockScrolling: true }}\n        />\n      </Con>\n    )\n  }\n}\n\nexport default Console\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Out = styled.div`\n\tdisplay: flex;\n  grid-area: display;\n\tplace-item: center stretch;\n`\n\nconst Pre = styled.pre`\n\tdisplay: flex;\n\tbackground-color: rgba(25, 25, 25, 1);\n  color: white;\n\twidth: 100%;\n\theight: auto;\n  padding: 10px;\n  white-space: pre-wrap;       /* Since CSS 2.1 */\n  white-space: -moz-pre-wrap;  /* Mozilla, since 1999 */\n  white-space: -pre-wrap;      /* Opera 4-6 */\n  white-space: -o-pre-wrap;    /* Opera 7 */\n  word-wrap: break-word;       \n  border-radius: 10px;\n`\n\nclass Output extends React.Component {\n  render() {\n    return (\n      <Out className=\"display\">\n        <Pre>\n          {this.props.text ||Â \"No Requests has been made\"}\n        </Pre>\n      </Out>\n    )\n  }\n}\n\nexport default Output\n","import React from 'react'\nimport styled from 'styled-components'\nimport Console from './Console.js'\nimport Output from './Output.js'\nimport ButtonIcon from './internet.svg'\n\nconst Landing = styled.div`\n  height: auto;\n  width: 100%;\n  display: grid;\n\n\n  // Meaning anything above a tablet get this layout\n  @media (min-width: 769px) {\n    grid-template-columns: 1.5fr 3fr 1fr 3fr 1.5fr;\n    grid-template-rows: 1fr 7fr 2fr;\n\n\n    grid-column-gap: 5px;\n    grid-row-gap: 5px;\n\n    grid-template-areas:\n      \" . request  . response  . \"\n      \" . console  .  display  . \"\n      \" .  send    .    .      . \";\n  }\n\n  // Layout for anything below & including tablet.. we currently don't distinguish between tablet & phone\n  // But for our tiny UI i don't believe it makes much of a difference.. and we both suck at UX design\n  // So i don't think that is what anyone will notice anyway! :) \n  @media (max-width: 768px) {\n    grid-template-columns: 1fr 3fr 1fr;\n    grid-template-rows: 1fr 4fr 1fr 1fr 4fr;\n\n    grid-column-gap: 5px;\n    grid-row-gap: 5px;\n\n    grid-template-areas:\n      \" . request  .  \"\n      \" . console  .  \"\n      \" . send     .  \"\n      \" . response .  \"\n      \" . display  .  \";\n  }\n  \n`\n\nconst Send = styled.div`\n  grid-area: send;\n  height: 40%;\n  width: 40%;\n  place-self: center;\n  margin-bottom: 2%;\n\n\n  :hover {\n    cursor: pointer;\n  }\n\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  fontsize: 10;\n`\n\nconst Request = styled.div`\n  grid-area: request;\n  font-size: 25pt;\n  text-align: center;\n  color: white;\n`\n\nconst Response = styled.div`\n  grid-area: response;\n  font-size: 25pt;\n  text-align: center;\n  color: white;\n`\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.consoleRef = React.createRef()\n\n    this.state = {\n      output: ''\n    }\n  }\n\n  render () {\n    return (\n      <Landing className='App'>\n        <Request> API Request </Request>\n        <Response> API Response </Response>\n        <Console ref={this.consoleRef} />\n        <Output text={this.state.output} />\n        <Send onClick={() => {\n          // Todo -- send request\n\n          // Update output with response\n          this.setState({ output: this.consoleRef.current.text })\n        }}>\n          <img alt='button-icon' src={ButtonIcon} />\n        </Send>\n      </Landing>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}